#include <ros.h>
#include <std_msgs/String.h>
String Robot_State; //  스트링형식으로 받는다.

ros::NodeHandle  nh;

std_msgs::String led_pos; // 메세지형식 선언
ros::Publisher LED_status("LED_status", &led_pos);

void action_LED( const std_msgs::String& msg){
  Robot_State = msg.data; //Robot_State는 msg.data 입력으로 받고, 
  LED_status.publish(&msg);
//13번포트 파란LED
//12번포트 빨간LED

//목적지까지 진행 시 1초간격으로 깜빡이게하기로
  if (Robot_State=="navigation") {
// navigation이라는 상태의 기준은 로봇에 속력이 존재하는지 아닌지로 구분
    digitalWrite(13, HIGH-digitalRead(13)); // 빵판 몇번째에 꽂을건지 확인
    digitalWrite(12, LOW-digitalRead(12)); // 상태 바뀔때마다 12번 빨간LED는 끈다.
    delay(1000);
    digitalWrite(13, LOW-digitalRead(13)); // 빵판 몇번째에 꽂을건지 확인
    delay(1000);
  }

// 목적지 도착 시 파란불 5초간 켜놓고 꺼지게하기
  if (Robot_State=="arrival") {
// arrival이라는 상태의 기준은 해당 좌표에 도달했는지로
    digitalWrite(13, HIGH-digitalRead(13));
    digitalWrite(12, LOW-digitalRead(12)); // 상태 바뀔때마다 12번 빨간LED는 끈다.
    delay(5000); // 5초만 파란불켜놓기
    digitalWrite(13, LOW-digitalRead(13));
    //여기는 딜레이 안넣어서 파란불 쭉 꺼져있도록
  }

// error 상태에서 다른 상태로 바뀔 때 까지 빨간불 켜놓기
  if (Robot_State=="error") {
    digitalWrite(12, HIGH-digitalRead(12));
  }
}

ros::Subscriber<std_msgs::String> sub("toggle_led", &action_LED );

void setup()
{ 
  pinMode(13, OUTPUT); // 빵판 어떻게 꽂을줄 모르니까 일단 번호부여, led출력 output
  pinMode(12, OUTPUT); //파랑 13번, 빨강 12
  
  nh.initNode();
  nh.advertise(LED_status);
  nh.subscribe(sub);
}

void loop()
{  
  nh.spinOnce();
  delay(10);
}




